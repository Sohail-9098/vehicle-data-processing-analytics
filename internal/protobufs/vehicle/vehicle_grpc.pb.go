// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: internal/protobufs/vehicle.proto

package vehicle

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DataProcessingService_ProcessTelemetryData_FullMethodName = "/vehicle.DataProcessingService/ProcessTelemetryData"
)

// DataProcessingServiceClient is the client API for DataProcessingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataProcessingServiceClient interface {
	ProcessTelemetryData(ctx context.Context, in *Telemetry, opts ...grpc.CallOption) (*Empty, error)
}

type dataProcessingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataProcessingServiceClient(cc grpc.ClientConnInterface) DataProcessingServiceClient {
	return &dataProcessingServiceClient{cc}
}

func (c *dataProcessingServiceClient) ProcessTelemetryData(ctx context.Context, in *Telemetry, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, DataProcessingService_ProcessTelemetryData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataProcessingServiceServer is the server API for DataProcessingService service.
// All implementations must embed UnimplementedDataProcessingServiceServer
// for forward compatibility
type DataProcessingServiceServer interface {
	ProcessTelemetryData(context.Context, *Telemetry) (*Empty, error)
	mustEmbedUnimplementedDataProcessingServiceServer()
}

// UnimplementedDataProcessingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataProcessingServiceServer struct {
}

func (UnimplementedDataProcessingServiceServer) ProcessTelemetryData(context.Context, *Telemetry) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTelemetryData not implemented")
}
func (UnimplementedDataProcessingServiceServer) mustEmbedUnimplementedDataProcessingServiceServer() {}

// UnsafeDataProcessingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataProcessingServiceServer will
// result in compilation errors.
type UnsafeDataProcessingServiceServer interface {
	mustEmbedUnimplementedDataProcessingServiceServer()
}

func RegisterDataProcessingServiceServer(s grpc.ServiceRegistrar, srv DataProcessingServiceServer) {
	s.RegisterService(&DataProcessingService_ServiceDesc, srv)
}

func _DataProcessingService_ProcessTelemetryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Telemetry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProcessingServiceServer).ProcessTelemetryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataProcessingService_ProcessTelemetryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProcessingServiceServer).ProcessTelemetryData(ctx, req.(*Telemetry))
	}
	return interceptor(ctx, in, info, handler)
}

// DataProcessingService_ServiceDesc is the grpc.ServiceDesc for DataProcessingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataProcessingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vehicle.DataProcessingService",
	HandlerType: (*DataProcessingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessTelemetryData",
			Handler:    _DataProcessingService_ProcessTelemetryData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/protobufs/vehicle.proto",
}
